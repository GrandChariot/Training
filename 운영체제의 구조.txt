1-3. 운영체제의 구조


1. 커널과 인터페이스
운영체제는 커널과 인터페이스로 나뉜다.
커널은 운영체제의 모든 핵심적인 것들을 모아둔 곳으로, 사용자가 직접 접근할 수는 없다.
그리고 인터페이스는 사용자에게 노출되는 곳으로 명령을 전달하고 결과를 알려주는 창구 역할을 한다.

커널이 같아도 인터페이스는 다를 수 있다. 당장 유닉스에도 다양한 '셸'(유닉스의 커널)이 존재한다.
애플의 iOS 커널은 공개되어있지 않지만, 구글의 안드로이드 커널은 공개되어 있어 다양한 제조사가 사용할 수 있다.


2. 시스템 호출과 드라이버
시스템 호출이란 사용자로부터 커널을 보호하기 위한 인터페이스이다.
컴퓨터의 자원은 사용자가 직접 접근할 수 없고, 오로지 시스템 호출을 통해서만 접근이 가능하다.
사용자가 만약에 사용하고 싶은 데이터의 주소를 직접 찾아야한다면, 찾기도 힘들고 에러를 낼 가능성도 매우 높다.
하지만 이를 운영체제에 일임한다면 빠르게 찾고 잘못된 데이터를 건드릴 가능성도 거의 없어진다.

"왜 printf() 함수를 사용했을 때 문자가 같은 위치에 겹쳐서 나타나는 일이 일어나지 않을까?"
"바로 운영체제가 알아서 출력할 위치의 주소값을 결정해주기 때문!"

한편, 하드웨어와 커널을 연결해주는 존재도 필요한데, 이것이 바로 '드라이버'이다.
일반적으로 드라이버는 커널이 아니라, 하드웨어를 만드는 쪽에서 만든다.
왜냐하면 운영체제 측에서 모든 하드웨어에 맞는 드라이버를 일일이 만들 수는 없기 때문이다.
커널은 입출력에 관한 아주 기초적이고 핵심적인 부분만을 담당한다.


3. 커널의 구성
커널이 하는 일에는 다섯 가지가 있다.
프로세스 관리 - 프로세스에 CPU를 배분하고 작업 환경 제공
메모리 관리 - 프로세스에 작업 공간을 배치하고 가상 공간 제공
파일 시스템 관리 - 데이터를 저장하고 접근 가능한 인터페이스 제공
입출력 관리 - 입력과 출력 서비스 제공
프로세스 간 통신 관리 - 공동 작업을 위해 각 프로세스간 통신 환경 제공
이 5가지에 대해서는 나중에 더 자세히 알아볼 예정이다.

초창기의 운영체제는 '단일형 구조 커널'을 이용했다.
커널의 핵심 모듈들이 하나의 커널에 통짜로 구성되어 있었다.
프로그래밍으로 치면 함수 없이 main()에 모든 것을 넣은 셈이다.

단일형 구조 커널은 프로그래밍으로 치면 '함수를 호출하는 과정'이 없기 때문에 빠르지만
단 하나의 모듈이라도 에러가 나면 시스템 전체가 마비되는 치명적인 단점을 안고 있다.
또한 수정하기가 까다로워서 요즘같이 복잡한 시대에는 도저히 사용할 수가 없다.

이를 보완하기 위해 등장한 것이 '계층형 구조 커널'이다.
비슷한 구조를 가진 모듈들끼리 하나의 계층을 만들어서, 커널 자체가 여러 개의 계층으로 이루어져 있다.
위의 단일형 구조 커널의 단점들을 모조리 보완해서 에러가 나도 에러가 난 커널만 수정하면 된다.
오늘날의 운영 체제는 전부 이 계층형 구조 커널을 사용하고 있다.

오늘날에는 '마이크로 구조 커널'이라는 것도 있다.
워낙에 커널의 기능이 다양해지다보니 계층형으로 넣기에도 곤란해진 결과 완전히 다른 방향에서의 접근이 시도되었다.
"심플 이즈 더 베스트", 커널은 가장 기초적인 기능만 제공하고 나머지는 전부 사용자 영역에서 이루어진다.

각각의 모듈들이 아예 개별적으로 이루어지고, 커널은 이 모듈들 간의 통신만을 제공한다.
하나의 모듈이 고장나도 전체적으로는 아무 영향도 없는데에다가, 커널이 가벼워서 이식도 쉽다.
그야말로 스마트폰에 딱 맞는 커널이다.


4. 가상머신
컴퓨터를 이용하다보면 가상머신이라는 말을 지겹도록 들어봤을 것이다.
사실, C로 프로그래밍을 참 많이도 해봤지만 실제로 C는 C로 만든 유닉스 커널이 아닌 운영체제와의 호환성이 구리다.
그 대표적인 예시가 놀랍게도 윈도우다. 정말 놀랍지만 윈도우랑 C는 상성이 나쁘다...

이런 호환성 문제를 해결하기 위해 나타난 것이 바로 가상머신을 이용한 JAVA이다.
JAVA는 운영체제 위에 가상머신을 만들어서 '마치 동일한 환경인 것처럼' 작동하도록 한다.
그리고! 무엇보다 운영체제를 공부할 때 윈도우 위에 유닉스 가상머신을 켜고 공부하면 된다는 사실!
바로 설치하러 가자.