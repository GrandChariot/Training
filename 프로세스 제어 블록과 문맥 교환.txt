3-2. 프로세스 제어 블록과 문맥 교환

1. 프로세스 제어 블록(Process Control Block; PCB)
앞에서도 말했듯, 프로세스 제어 블록이란 프로세스의 모든 상태를 보관하는 데이터구조이다.
프로세스 제어 블록이 생성됨으로서 프로그램은 비로소 프로세스가 된다.

우선 프로세스 제어 블록에는 어떤 구성요소들이 있는지 알아보기로 한다.
- 포인터: 이 프로세스 제어 블록의 주소를 나타낸다. 이를 이용해 어떠한 큐에 돌입한다.
- 프로세스 상태: 생성, 준비, 실행, 대기, 보류 등의 상태를 나타낸다.
- 프로세스 구분자: 여러 프로세스를 구분하기 위한 구분자이다.
- 프로그램 카운터: 다음에 실행될 명령어의 위치를 나타낸다(레지스터의 그것과 같다)
- 프로세스 우선순위: 앞에서 준비 큐를 공부할 때, 준비 큐가 사실 한 개가 아니라는 건 배웠다.
실제로는 우선순위에 따라서 여러 개의 준비 큐가 존재한다.
가령, 사용자 프로세스보다 커널 프로세스는 우선순위가 높다. 추후 더 자세히 살펴볼 예정.
- 각종 레지스터 정보: 프로세스가 사용중인 레지스터의 정보가 기록된다.
누산기, 색인 레지스터, 스택 포인터 등 아직 배우지 않은 다양한 레지스터 정보가 있다.
- 메모리 관리 정보: 프로세스가 메모리의 어디에 존재하는지, 경계 레지스터와 한계 레지스터는 어딘지 등이 저장된다.
세그먼테이션 테이블, 페이지 테이블 등의 메모리 정보도 기록되는데 이 역시 나중에 더 자세히 살펴보겠다.
- 할당된 자원 정보: 입출력 자원, 오픈 파일 등에 대한 정보이다.
이렇게 말하면 어렵지만, 예를 들어서 어떤 입출력 장치와 외부 파일을 사용하는지를 생각하면 편하다.
- 계정 정보: 계정 번호, CPU 할당 시간, CPU 사용 시간 등 작업 관리자에서 확인할 수 있는 것들이다.
- 부모 프로세스와 자식 프로세스 구분자: PPID와 CPID를 구분하는데... 이거 역시 추후 살펴보기로 한다.


2. 문맥 교환
준비 상태인 프로세스가 실행 상태가 되고, 실행 상태였던 프로세스는 준비 상태로 돌아가는 것을 '문맥 교환'이라고 한다.
이 때, CPU는 다음 프로세스를 실행하기 위해 세팅을 해야하고 프로세스 제어 블록의 내용은 변경되어야 한다.

문맥 교환의 순서는 다음과 같다.

프로세스 P1이 타임 슬라이스를 전부 사용하여 타임아웃이 일어난다.
P1의 상태가 PCB1에 저장되고
PCB2에서 P2의 상태를 가져온다.