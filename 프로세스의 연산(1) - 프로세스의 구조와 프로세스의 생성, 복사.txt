3-3. 프로세스의 연산(1) - 프로세스의 구조와 프로세스의 생성, 복사

1. 프로세스의 구조
프로세스에는 코드 영역, 데이터 영역, 스택 영역이 있다.
이름 그대로의 역할을 하기 때문에 이해하기가 쉽다.

- 코드 영역: 프로그램이 어떤 역할을 수행하는지 코드가 입력되어있다.
즉 '프로그램' 그 자체가 기술된 곳이며, 읽기 전용이다.

- 데이터 영역: 프로그램이 사용하는 데이터들이 저장되어있다. 일반 영역과 힙 영역으로 나뉜다.
상수를 제외한 나머지 변수는 모두 읽기와 쓰기가 가능하다.

- 스택 영역: 프로그램이 코드를 실행하기 위해 운영체제가 부가적으로 관리하는 데이터가 보관된다.
이렇게 말하면 대체 어떤 데이터라는 건지 이해하기가 어렵지만...
예를 들어 프로세스 내에서 함수를 호출하면, 함수를 수행하고 다시 몇 번째 줄로 돌아올지가 저장된다거나
아무튼 그런 기타 등등의 정보가 보관되는 곳이다.


2. 프로세스의 생성과 복사
프로세스는 프로그램을 실행할 때 생성된다(즉 실행되기 전까진 프로세스가 아니다!)
하지만 그 방법 말고, 실행 중인 프로세스를 복사할 수도 있다.
그리고 당연히 새로 실행하는 것보다 복사하는 것이 훨씬 쉽고 빠르다!

프로세스를 복사하는 데에는 fork() 시스템 호출이 사용된다.
예를 들어, 크롬을 사용하다 크롬창을 하나 더 켜거나 워드를 사용하다 워드를 하나 더 켜면 fork()가 호출된다.
직접 확인하고 싶으면 크롬이나 파이어폭스 등을 사용하다가 Ctrl+N을 눌러보자.
순식간에 하나가 더 켜지는 것을 확인할 수 있을 것이다.

프로세스 제어 블록에서 설명했던 부모-자식 프로세스가 여기에서 나타난다.
기존에 있던 프로세스가 부모 프로세스, 새로 생겨난 프로세스가 자식 프로세스가 되는 것이다.

프로세스 복사가 일어나면 프로세스 제어 블록을 포함한 프로세스의 모든 구성요소가 복사된다.
단, 일부 요소가 변경되는데 우선 프로세스 구분자가 바뀐다(당연히 서로 다른 프로세스니까!)
또한 메모리의 위치가 다르기 때문에 메모리 영역 및 메모리 관련 정보가 달라진다.
마지막으로 부모 프로세스와 자식 프로세스 구분자 부분이 바뀐다.

프로세스를 복사할 때의 이점은 아래와 같다.
- 프로세스 생성 속도가 빠르다(당연히 블록을 스스로 구축하지 않고 복붙만 하면 되니까!)
- 추가 작업 없이 자원을 상속할 수 있다(부모가 사용하던 데이터를 전부 그대로 사용할 수 있다)
- 시스템 관리를 효율적으로 할 수 있다(자식 프로세스가 종료되면 그 자원을 그대로 부모 프로세스가 정리한다.)