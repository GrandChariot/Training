2-4. 병렬 처리(1) - 멀티스레드와 파이프라인

1. 병렬 처리의 개념
듀얼 코어라던가, 스레드라던가... CPU를 구매할 때 질리도록 들어본 말들이다.
대충 한 번에 여러 가지 작업을 한다는 건 알고 있지만, 그게 어떤 식으로 이루어지는지는 모른다.
이에 대해서 알아보기로 하자.

멀티스레드와 슈퍼스칼라의 차이를 이해하는 건 다소 복잡한 일이 되기 때문에 비유가 필요하다.
코어를 하나의 주방이라고 하면, 병렬 처리를 사용하지 않는 주방에 대해서 살펴보자.

병렬 처리를 사용하지 않는 주방에서는, 한 개의 요리를 만드는 과정을 끝마쳐야 다른 요리를 만든다.
요리 과정이 준비 -> 손질 -> 조리 -> 마무리로 이루어진다고 가정하면,
도마에서 재료를 손질하는 동안 가스레인지는 놀고 있는 셈이다.
요리 하나를 40분동안 만든다고 하면 요리 3개를 만드는 데에는 아래와 같이 120분이나 걸린다.

준비 -> 손질 -> 조리 -> 마무리 -> 준비 -> .... -> 조리 -> 마무리

이런 비효율을 해결하기 위해 등장한 것이 바로 '파이프라인 기법'이다.
파이프라인 기법은 서로 겹치지 않는 작업을 동시에 진행하는 기법이다.
파이프라인 기법을 사용해서 볶음밥 3개를 만드는 과정은 아래와 같이 총 60분에 불과하다.
게다가 파이프라인 기법은 주방이 하나(코어가 하나)라도 행할 수 있다.

준비 -> 손질 -> 조리 -> 마무리
           준비 -> 손질 -> 조리   -> 마무리
                      준비 -> 손질   -> 조리   -> 마무리


그런데 이런 파이프라인 기법에도 문제가 없는 것은 아니다.
이를 '파이프라인의 위험'이라고 한다.

- 데이터 위험
동시에 이루어지는 두 가지 다른 작업에서 같은 데이터를 참조할 경우 문제가 생길 수 있다.
가령, A = B+D라는 작업과 C = A+E라는 작업이 동시에 일어난다고 생각해보자...
실제로 이 문제를 파이썬에서 소팅할 때 겪은 적이 있었는데, 정신이 아득해졌다...

- 제어 위험
제어 위험은 카운터값의 변화로 인해 생기는 위험이다.
레지스터에서 배운 바로 카운터란 '다음에 몇 번째 줄을 실행할까?'를 뜻한다고 했다.
그런데 if문이나 goto문 등으로 이 카운터가 갑자기 변화한 경우?
지금 실행하고 있는 명령어들이 전혀 필요가 없어진다.