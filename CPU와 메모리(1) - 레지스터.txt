2-2. CPU와 메모리(1) - 레지스터

1. CPU의 구성과 동작
CPU 내부는 여러 가지 구성 요소로 이루어져있고, 이 구성 요소들은 클록이 보내는 신호에 맞춰 동작한다.
산술논리 연산장치는 사칙연산이나 논리연산 등을 담당한다.
제어장치는 작업을 지시한다.
그리고 레지스터는 당장 사용할 데이터를 임시로 보관한다.(C에는 레지스터에 변수를 저장하는 명령어가 있다!)
 
여기부터는 다소 어려운 내용이 시작되기 때문에 깊게 생각하면서 공부해야 한다.
우선 간단하게 CPU의 구성요소들이 어떻게 협업하는지 알아보기로 한다.

int num1=3, num2=2, sum;
sum = num1+num2;

간단한 변수 선언과 연산 작업이다.
C는 로우 레벨 언어지만, CPU 단위로 생각하기에는 너무 하이 레벨이다.
그렇기 때문에 어셈블리어까지 내려가보도록 하자.

LOAD mem(100), register 2; // 메모리의 100번에 있는 값을 레지스터 2로 가져온다.
LOAD mem(120), register 3; // 메모리의 120번에 있는 값을 레지스터 3으로 가져온다.
ADD register 5, register 2, register 3; // 레지스터 2와 레지스터 3에 저장된 값을 더해서 레지스터 5에 넣는다.
MOVE register 5, mem(160); // 레지스터 5에 있는 값을 메모리의 160번에 저장한다.

이렇게, 메모리에 있는 데이터들은 레지스터로 옮겨진 후 연산을 하고 다시 메모리로 돌아간다.
그리고 이 과정에서 연산장치, 제어장치, 레지스터는 전부 사용되었다.

특히 레지스터에 대해서는 알아야 할 게 많은데, 비록 레지스터에 할당된 공간은 많지 않지만 정말 다양한 레지스터가 있기 때문이다.
레지스터의 종류에 대해서는 천천히, 꼼꼼하게 살펴봐야 한다.

- 데이터 레지스터(DR)
가장 익숙한 레지스터! 현재 작업에 사용중인 데이터가 보관된다.
가장 많기 때문에 범용 레지스터라고도 부른다.

- 주소 레지스터(AR)
데이터와 명령어가 저장된 주소를 저장하는 레지스터이다!

이 둘은 사용자 가시 레지스터이고, 이외의 레지스터는 전부 특수 레지스터라고 한다.

- 프로그램 카운터(PC)
다음에 처리할 명령어의 주소를 알려준다.

- 명령어 레지스터(IR)
현재 실행 중인 명령어를 저장한다.
어떤 명령어냐에 따라 제어장치가 명령을 내리게 된다.

- 메모리 주소 레지스터
- 메모리 버퍼 레지스터
얘들은 한 세트이다. 메모리를 보낼 주소를, 메모리에 보낼 데이터를 임시로 저장한다.
항상 동시에 일하는 게 특징이다.